// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: udpmsg.proto

/*
	Package udpmsg_pb is a generated protocol buffer package.

	It is generated from these files:
		udpmsg.proto

	It has these top-level messages:
		UdpMessage
*/
package udpmsg_pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UdpMessage_MessageType int32

const (
	UdpMessage_PING      UdpMessage_MessageType = 0
	UdpMessage_PONG      UdpMessage_MessageType = 1
	UdpMessage_FINDNODE  UdpMessage_MessageType = 2
	UdpMessage_NEIGHBORS UdpMessage_MessageType = 3
)

var UdpMessage_MessageType_name = map[int32]string{
	0: "PING",
	1: "PONG",
	2: "FINDNODE",
	3: "NEIGHBORS",
}
var UdpMessage_MessageType_value = map[string]int32{
	"PING":      0,
	"PONG":      1,
	"FINDNODE":  2,
	"NEIGHBORS": 3,
}

func (x UdpMessage_MessageType) Enum() *UdpMessage_MessageType {
	p := new(UdpMessage_MessageType)
	*p = x
	return p
}
func (x UdpMessage_MessageType) String() string {
	return proto.EnumName(UdpMessage_MessageType_name, int32(x))
}
func (x *UdpMessage_MessageType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(UdpMessage_MessageType_value, data, "UdpMessage_MessageType")
	if err != nil {
		return err
	}
	*x = UdpMessage_MessageType(value)
	return nil
}
func (UdpMessage_MessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorUdpmsg, []int{0, 0}
}

type UdpMessage struct {
	MsgType          *UdpMessage_MessageType `protobuf:"varint,1,req,name=msgType,enum=udpmsg.pb.UdpMessage_MessageType" json:"msgType,omitempty"`
	Ping             *UdpMessage_Ping        `protobuf:"bytes,2,opt,name=ping" json:"ping,omitempty"`
	Pong             *UdpMessage_Pong        `protobuf:"bytes,3,opt,name=pong" json:"pong,omitempty"`
	FindNode         *UdpMessage_FindNode    `protobuf:"bytes,4,opt,name=findNode" json:"findNode,omitempty"`
	Neighbors        *UdpMessage_Neighbors   `protobuf:"bytes,5,opt,name=neighbors" json:"neighbors,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *UdpMessage) Reset()                    { *m = UdpMessage{} }
func (m *UdpMessage) String() string            { return proto.CompactTextString(m) }
func (*UdpMessage) ProtoMessage()               {}
func (*UdpMessage) Descriptor() ([]byte, []int) { return fileDescriptorUdpmsg, []int{0} }

func (m *UdpMessage) GetMsgType() UdpMessage_MessageType {
	if m != nil && m.MsgType != nil {
		return *m.MsgType
	}
	return UdpMessage_PING
}

func (m *UdpMessage) GetPing() *UdpMessage_Ping {
	if m != nil {
		return m.Ping
	}
	return nil
}

func (m *UdpMessage) GetPong() *UdpMessage_Pong {
	if m != nil {
		return m.Pong
	}
	return nil
}

func (m *UdpMessage) GetFindNode() *UdpMessage_FindNode {
	if m != nil {
		return m.FindNode
	}
	return nil
}

func (m *UdpMessage) GetNeighbors() *UdpMessage_Neighbors {
	if m != nil {
		return m.Neighbors
	}
	return nil
}

type UdpMessage_Endpoint struct {
	IP               []byte  `protobuf:"bytes,1,req,name=IP" json:"IP,omitempty"`
	UDP              *uint32 `protobuf:"varint,2,req,name=UDP" json:"UDP,omitempty"`
	TCP              *uint32 `protobuf:"varint,3,req,name=TCP" json:"TCP,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *UdpMessage_Endpoint) Reset()                    { *m = UdpMessage_Endpoint{} }
func (m *UdpMessage_Endpoint) String() string            { return proto.CompactTextString(m) }
func (*UdpMessage_Endpoint) ProtoMessage()               {}
func (*UdpMessage_Endpoint) Descriptor() ([]byte, []int) { return fileDescriptorUdpmsg, []int{0, 0} }

func (m *UdpMessage_Endpoint) GetIP() []byte {
	if m != nil {
		return m.IP
	}
	return nil
}

func (m *UdpMessage_Endpoint) GetUDP() uint32 {
	if m != nil && m.UDP != nil {
		return *m.UDP
	}
	return 0
}

func (m *UdpMessage_Endpoint) GetTCP() uint32 {
	if m != nil && m.TCP != nil {
		return *m.TCP
	}
	return 0
}

type UdpMessage_Node struct {
	IP               []byte  `protobuf:"bytes,1,req,name=IP" json:"IP,omitempty"`
	UDP              *uint32 `protobuf:"varint,2,req,name=UDP" json:"UDP,omitempty"`
	TCP              *uint32 `protobuf:"varint,3,req,name=TCP" json:"TCP,omitempty"`
	NodeId           []byte  `protobuf:"bytes,4,req,name=NodeId" json:"NodeId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *UdpMessage_Node) Reset()                    { *m = UdpMessage_Node{} }
func (m *UdpMessage_Node) String() string            { return proto.CompactTextString(m) }
func (*UdpMessage_Node) ProtoMessage()               {}
func (*UdpMessage_Node) Descriptor() ([]byte, []int) { return fileDescriptorUdpmsg, []int{0, 1} }

func (m *UdpMessage_Node) GetIP() []byte {
	if m != nil {
		return m.IP
	}
	return nil
}

func (m *UdpMessage_Node) GetUDP() uint32 {
	if m != nil && m.UDP != nil {
		return *m.UDP
	}
	return 0
}

func (m *UdpMessage_Node) GetTCP() uint32 {
	if m != nil && m.TCP != nil {
		return *m.TCP
	}
	return 0
}

func (m *UdpMessage_Node) GetNodeId() []byte {
	if m != nil {
		return m.NodeId
	}
	return nil
}

type UdpMessage_Ping struct {
	From             *UdpMessage_Endpoint `protobuf:"bytes,1,req,name=From" json:"From,omitempty"`
	To               *UdpMessage_Endpoint `protobuf:"bytes,2,req,name=To" json:"To,omitempty"`
	Expiration       *uint64              `protobuf:"varint,3,opt,name=Expiration" json:"Expiration,omitempty"`
	Extra            []byte               `protobuf:"bytes,4,opt,name=Extra" json:"Extra,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *UdpMessage_Ping) Reset()                    { *m = UdpMessage_Ping{} }
func (m *UdpMessage_Ping) String() string            { return proto.CompactTextString(m) }
func (*UdpMessage_Ping) ProtoMessage()               {}
func (*UdpMessage_Ping) Descriptor() ([]byte, []int) { return fileDescriptorUdpmsg, []int{0, 2} }

func (m *UdpMessage_Ping) GetFrom() *UdpMessage_Endpoint {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *UdpMessage_Ping) GetTo() *UdpMessage_Endpoint {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *UdpMessage_Ping) GetExpiration() uint64 {
	if m != nil && m.Expiration != nil {
		return *m.Expiration
	}
	return 0
}

func (m *UdpMessage_Ping) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

type UdpMessage_Pong struct {
	From             *UdpMessage_Endpoint `protobuf:"bytes,1,req,name=From" json:"From,omitempty"`
	To               *UdpMessage_Endpoint `protobuf:"bytes,2,req,name=To" json:"To,omitempty"`
	Expiration       *uint64              `protobuf:"varint,3,opt,name=Expiration" json:"Expiration,omitempty"`
	Extra            []byte               `protobuf:"bytes,4,opt,name=Extra" json:"Extra,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *UdpMessage_Pong) Reset()                    { *m = UdpMessage_Pong{} }
func (m *UdpMessage_Pong) String() string            { return proto.CompactTextString(m) }
func (*UdpMessage_Pong) ProtoMessage()               {}
func (*UdpMessage_Pong) Descriptor() ([]byte, []int) { return fileDescriptorUdpmsg, []int{0, 3} }

func (m *UdpMessage_Pong) GetFrom() *UdpMessage_Endpoint {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *UdpMessage_Pong) GetTo() *UdpMessage_Endpoint {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *UdpMessage_Pong) GetExpiration() uint64 {
	if m != nil && m.Expiration != nil {
		return *m.Expiration
	}
	return 0
}

func (m *UdpMessage_Pong) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

type UdpMessage_FindNode struct {
	From             *UdpMessage_Endpoint `protobuf:"bytes,1,req,name=From" json:"From,omitempty"`
	To               *UdpMessage_Endpoint `protobuf:"bytes,2,req,name=To" json:"To,omitempty"`
	Target           *UdpMessage_Endpoint `protobuf:"bytes,3,req,name=Target" json:"Target,omitempty"`
	Expiration       *uint64              `protobuf:"varint,4,opt,name=Expiration" json:"Expiration,omitempty"`
	Extra            []byte               `protobuf:"bytes,5,opt,name=Extra" json:"Extra,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *UdpMessage_FindNode) Reset()                    { *m = UdpMessage_FindNode{} }
func (m *UdpMessage_FindNode) String() string            { return proto.CompactTextString(m) }
func (*UdpMessage_FindNode) ProtoMessage()               {}
func (*UdpMessage_FindNode) Descriptor() ([]byte, []int) { return fileDescriptorUdpmsg, []int{0, 4} }

func (m *UdpMessage_FindNode) GetFrom() *UdpMessage_Endpoint {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *UdpMessage_FindNode) GetTo() *UdpMessage_Endpoint {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *UdpMessage_FindNode) GetTarget() *UdpMessage_Endpoint {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *UdpMessage_FindNode) GetExpiration() uint64 {
	if m != nil && m.Expiration != nil {
		return *m.Expiration
	}
	return 0
}

func (m *UdpMessage_FindNode) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

type UdpMessage_Neighbors struct {
	From             *UdpMessage_Endpoint `protobuf:"bytes,1,req,name=From" json:"From,omitempty"`
	To               *UdpMessage_Endpoint `protobuf:"bytes,2,req,name=To" json:"To,omitempty"`
	Nodes            []*UdpMessage_Node   `protobuf:"bytes,3,rep,name=Nodes" json:"Nodes,omitempty"`
	Expiration       *uint64              `protobuf:"varint,4,opt,name=Expiration" json:"Expiration,omitempty"`
	Extra            []byte               `protobuf:"bytes,5,opt,name=Extra" json:"Extra,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *UdpMessage_Neighbors) Reset()                    { *m = UdpMessage_Neighbors{} }
func (m *UdpMessage_Neighbors) String() string            { return proto.CompactTextString(m) }
func (*UdpMessage_Neighbors) ProtoMessage()               {}
func (*UdpMessage_Neighbors) Descriptor() ([]byte, []int) { return fileDescriptorUdpmsg, []int{0, 5} }

func (m *UdpMessage_Neighbors) GetFrom() *UdpMessage_Endpoint {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *UdpMessage_Neighbors) GetTo() *UdpMessage_Endpoint {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *UdpMessage_Neighbors) GetNodes() []*UdpMessage_Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *UdpMessage_Neighbors) GetExpiration() uint64 {
	if m != nil && m.Expiration != nil {
		return *m.Expiration
	}
	return 0
}

func (m *UdpMessage_Neighbors) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

func init() {
	proto.RegisterType((*UdpMessage)(nil), "udpmsg.pb.UdpMessage")
	proto.RegisterType((*UdpMessage_Endpoint)(nil), "udpmsg.pb.UdpMessage.Endpoint")
	proto.RegisterType((*UdpMessage_Node)(nil), "udpmsg.pb.UdpMessage.Node")
	proto.RegisterType((*UdpMessage_Ping)(nil), "udpmsg.pb.UdpMessage.Ping")
	proto.RegisterType((*UdpMessage_Pong)(nil), "udpmsg.pb.UdpMessage.Pong")
	proto.RegisterType((*UdpMessage_FindNode)(nil), "udpmsg.pb.UdpMessage.FindNode")
	proto.RegisterType((*UdpMessage_Neighbors)(nil), "udpmsg.pb.UdpMessage.Neighbors")
	proto.RegisterEnum("udpmsg.pb.UdpMessage_MessageType", UdpMessage_MessageType_name, UdpMessage_MessageType_value)
}
func (m *UdpMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UdpMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MsgType == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUdpmsg(dAtA, i, uint64(*m.MsgType))
	}
	if m.Ping != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUdpmsg(dAtA, i, uint64(m.Ping.Size()))
		n1, err := m.Ping.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Pong != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUdpmsg(dAtA, i, uint64(m.Pong.Size()))
		n2, err := m.Pong.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.FindNode != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUdpmsg(dAtA, i, uint64(m.FindNode.Size()))
		n3, err := m.FindNode.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Neighbors != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintUdpmsg(dAtA, i, uint64(m.Neighbors.Size()))
		n4, err := m.Neighbors.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UdpMessage_Endpoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UdpMessage_Endpoint) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IP == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUdpmsg(dAtA, i, uint64(len(m.IP)))
		i += copy(dAtA[i:], m.IP)
	}
	if m.UDP == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUdpmsg(dAtA, i, uint64(*m.UDP))
	}
	if m.TCP == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUdpmsg(dAtA, i, uint64(*m.TCP))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UdpMessage_Node) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UdpMessage_Node) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IP == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUdpmsg(dAtA, i, uint64(len(m.IP)))
		i += copy(dAtA[i:], m.IP)
	}
	if m.UDP == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUdpmsg(dAtA, i, uint64(*m.UDP))
	}
	if m.TCP == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUdpmsg(dAtA, i, uint64(*m.TCP))
	}
	if m.NodeId == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUdpmsg(dAtA, i, uint64(len(m.NodeId)))
		i += copy(dAtA[i:], m.NodeId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UdpMessage_Ping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UdpMessage_Ping) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.From == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUdpmsg(dAtA, i, uint64(m.From.Size()))
		n5, err := m.From.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.To == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUdpmsg(dAtA, i, uint64(m.To.Size()))
		n6, err := m.To.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.Expiration != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUdpmsg(dAtA, i, uint64(*m.Expiration))
	}
	if m.Extra != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUdpmsg(dAtA, i, uint64(len(m.Extra)))
		i += copy(dAtA[i:], m.Extra)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UdpMessage_Pong) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UdpMessage_Pong) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.From == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUdpmsg(dAtA, i, uint64(m.From.Size()))
		n7, err := m.From.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.To == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUdpmsg(dAtA, i, uint64(m.To.Size()))
		n8, err := m.To.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.Expiration != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUdpmsg(dAtA, i, uint64(*m.Expiration))
	}
	if m.Extra != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUdpmsg(dAtA, i, uint64(len(m.Extra)))
		i += copy(dAtA[i:], m.Extra)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UdpMessage_FindNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UdpMessage_FindNode) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.From == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUdpmsg(dAtA, i, uint64(m.From.Size()))
		n9, err := m.From.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.To == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUdpmsg(dAtA, i, uint64(m.To.Size()))
		n10, err := m.To.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.Target == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUdpmsg(dAtA, i, uint64(m.Target.Size()))
		n11, err := m.Target.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.Expiration != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintUdpmsg(dAtA, i, uint64(*m.Expiration))
	}
	if m.Extra != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintUdpmsg(dAtA, i, uint64(len(m.Extra)))
		i += copy(dAtA[i:], m.Extra)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UdpMessage_Neighbors) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UdpMessage_Neighbors) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.From == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUdpmsg(dAtA, i, uint64(m.From.Size()))
		n12, err := m.From.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.To == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUdpmsg(dAtA, i, uint64(m.To.Size()))
		n13, err := m.To.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if len(m.Nodes) > 0 {
		for _, msg := range m.Nodes {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintUdpmsg(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Expiration != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintUdpmsg(dAtA, i, uint64(*m.Expiration))
	}
	if m.Extra != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintUdpmsg(dAtA, i, uint64(len(m.Extra)))
		i += copy(dAtA[i:], m.Extra)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintUdpmsg(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *UdpMessage) Size() (n int) {
	var l int
	_ = l
	if m.MsgType != nil {
		n += 1 + sovUdpmsg(uint64(*m.MsgType))
	}
	if m.Ping != nil {
		l = m.Ping.Size()
		n += 1 + l + sovUdpmsg(uint64(l))
	}
	if m.Pong != nil {
		l = m.Pong.Size()
		n += 1 + l + sovUdpmsg(uint64(l))
	}
	if m.FindNode != nil {
		l = m.FindNode.Size()
		n += 1 + l + sovUdpmsg(uint64(l))
	}
	if m.Neighbors != nil {
		l = m.Neighbors.Size()
		n += 1 + l + sovUdpmsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UdpMessage_Endpoint) Size() (n int) {
	var l int
	_ = l
	if m.IP != nil {
		l = len(m.IP)
		n += 1 + l + sovUdpmsg(uint64(l))
	}
	if m.UDP != nil {
		n += 1 + sovUdpmsg(uint64(*m.UDP))
	}
	if m.TCP != nil {
		n += 1 + sovUdpmsg(uint64(*m.TCP))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UdpMessage_Node) Size() (n int) {
	var l int
	_ = l
	if m.IP != nil {
		l = len(m.IP)
		n += 1 + l + sovUdpmsg(uint64(l))
	}
	if m.UDP != nil {
		n += 1 + sovUdpmsg(uint64(*m.UDP))
	}
	if m.TCP != nil {
		n += 1 + sovUdpmsg(uint64(*m.TCP))
	}
	if m.NodeId != nil {
		l = len(m.NodeId)
		n += 1 + l + sovUdpmsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UdpMessage_Ping) Size() (n int) {
	var l int
	_ = l
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovUdpmsg(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovUdpmsg(uint64(l))
	}
	if m.Expiration != nil {
		n += 1 + sovUdpmsg(uint64(*m.Expiration))
	}
	if m.Extra != nil {
		l = len(m.Extra)
		n += 1 + l + sovUdpmsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UdpMessage_Pong) Size() (n int) {
	var l int
	_ = l
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovUdpmsg(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovUdpmsg(uint64(l))
	}
	if m.Expiration != nil {
		n += 1 + sovUdpmsg(uint64(*m.Expiration))
	}
	if m.Extra != nil {
		l = len(m.Extra)
		n += 1 + l + sovUdpmsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UdpMessage_FindNode) Size() (n int) {
	var l int
	_ = l
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovUdpmsg(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovUdpmsg(uint64(l))
	}
	if m.Target != nil {
		l = m.Target.Size()
		n += 1 + l + sovUdpmsg(uint64(l))
	}
	if m.Expiration != nil {
		n += 1 + sovUdpmsg(uint64(*m.Expiration))
	}
	if m.Extra != nil {
		l = len(m.Extra)
		n += 1 + l + sovUdpmsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UdpMessage_Neighbors) Size() (n int) {
	var l int
	_ = l
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovUdpmsg(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovUdpmsg(uint64(l))
	}
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovUdpmsg(uint64(l))
		}
	}
	if m.Expiration != nil {
		n += 1 + sovUdpmsg(uint64(*m.Expiration))
	}
	if m.Extra != nil {
		l = len(m.Extra)
		n += 1 + l + sovUdpmsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovUdpmsg(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozUdpmsg(x uint64) (n int) {
	return sovUdpmsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UdpMessage) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUdpmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UdpMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UdpMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgType", wireType)
			}
			var v UdpMessage_MessageType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUdpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (UdpMessage_MessageType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MsgType = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ping", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUdpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUdpmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ping == nil {
				m.Ping = &UdpMessage_Ping{}
			}
			if err := m.Ping.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pong", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUdpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUdpmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pong == nil {
				m.Pong = &UdpMessage_Pong{}
			}
			if err := m.Pong.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FindNode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUdpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUdpmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FindNode == nil {
				m.FindNode = &UdpMessage_FindNode{}
			}
			if err := m.FindNode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Neighbors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUdpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUdpmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Neighbors == nil {
				m.Neighbors = &UdpMessage_Neighbors{}
			}
			if err := m.Neighbors.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUdpmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUdpmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UdpMessage_Endpoint) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUdpmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Endpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Endpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUdpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthUdpmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IP = append(m.IP[:0], dAtA[iNdEx:postIndex]...)
			if m.IP == nil {
				m.IP = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UDP", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUdpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UDP = &v
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TCP", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUdpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TCP = &v
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipUdpmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUdpmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UdpMessage_Node) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUdpmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUdpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthUdpmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IP = append(m.IP[:0], dAtA[iNdEx:postIndex]...)
			if m.IP == nil {
				m.IP = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UDP", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUdpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UDP = &v
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TCP", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUdpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TCP = &v
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUdpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthUdpmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = append(m.NodeId[:0], dAtA[iNdEx:postIndex]...)
			if m.NodeId == nil {
				m.NodeId = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipUdpmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUdpmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return new(proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UdpMessage_Ping) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUdpmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUdpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUdpmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &UdpMessage_Endpoint{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUdpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUdpmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &UdpMessage_Endpoint{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiration", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUdpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Expiration = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUdpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthUdpmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = append(m.Extra[:0], dAtA[iNdEx:postIndex]...)
			if m.Extra == nil {
				m.Extra = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUdpmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUdpmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UdpMessage_Pong) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUdpmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pong: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pong: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUdpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUdpmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &UdpMessage_Endpoint{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUdpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUdpmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &UdpMessage_Endpoint{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiration", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUdpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Expiration = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUdpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthUdpmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = append(m.Extra[:0], dAtA[iNdEx:postIndex]...)
			if m.Extra == nil {
				m.Extra = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUdpmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUdpmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UdpMessage_FindNode) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUdpmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUdpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUdpmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &UdpMessage_Endpoint{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUdpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUdpmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &UdpMessage_Endpoint{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUdpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUdpmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Target == nil {
				m.Target = &UdpMessage_Endpoint{}
			}
			if err := m.Target.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiration", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUdpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Expiration = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUdpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthUdpmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = append(m.Extra[:0], dAtA[iNdEx:postIndex]...)
			if m.Extra == nil {
				m.Extra = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUdpmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUdpmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UdpMessage_Neighbors) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUdpmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Neighbors: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Neighbors: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUdpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUdpmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &UdpMessage_Endpoint{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUdpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUdpmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &UdpMessage_Endpoint{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUdpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUdpmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &UdpMessage_Node{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiration", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUdpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Expiration = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUdpmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthUdpmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = append(m.Extra[:0], dAtA[iNdEx:postIndex]...)
			if m.Extra == nil {
				m.Extra = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUdpmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUdpmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUdpmsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUdpmsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUdpmsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUdpmsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthUdpmsg
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowUdpmsg
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipUdpmsg(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthUdpmsg = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUdpmsg   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("udpmsg.proto", fileDescriptorUdpmsg) }

var fileDescriptorUdpmsg = []byte{
	// 454 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x94, 0xbf, 0x6e, 0xd3, 0x40,
	0x18, 0xc0, 0x7b, 0xe7, 0x4b, 0xb1, 0xbf, 0xa6, 0x95, 0x75, 0x42, 0xe8, 0x94, 0xc1, 0x84, 0x4e,
	0x99, 0x2c, 0x94, 0x81, 0x01, 0x44, 0x87, 0x36, 0x4e, 0xf0, 0x80, 0x63, 0x1d, 0xee, 0x03, 0xa4,
	0xb2, 0x39, 0x3c, 0xe4, 0xce, 0xb2, 0x8d, 0x54, 0xde, 0x84, 0x91, 0xc7, 0x61, 0x64, 0x63, 0x61,
	0x40, 0xe1, 0x21, 0x58, 0x91, 0xbf, 0xd8, 0x69, 0x84, 0x12, 0x2a, 0x75, 0x88, 0x98, 0x7c, 0xf7,
	0xe9, 0xf7, 0xb3, 0xbf, 0x3f, 0x77, 0x86, 0xfe, 0xc7, 0xb4, 0x58, 0x56, 0xca, 0x2f, 0x4a, 0x53,
	0x1b, 0xee, 0x74, 0xbb, 0x9b, 0xf3, 0xdf, 0x0e, 0xc0, 0x75, 0x5a, 0xbc, 0xcd, 0xaa, 0x6a, 0xa1,
	0x32, 0xfe, 0x0a, 0x1e, 0x2d, 0x2b, 0x95, 0x7c, 0x2a, 0x32, 0x41, 0x86, 0x74, 0x74, 0x36, 0x7e,
	0xe6, 0x6f, 0x58, 0xff, 0x8e, 0xf3, 0xdb, 0x67, 0x03, 0xca, 0xce, 0xe0, 0x3e, 0xb0, 0x22, 0xd7,
	0x4a, 0xd0, 0x21, 0x19, 0x9d, 0x8c, 0x07, 0xbb, 0xcd, 0x38, 0xd7, 0x4a, 0x22, 0x87, 0xbc, 0xd1,
	0x4a, 0x58, 0xff, 0xe4, 0x0d, 0xf2, 0x46, 0x2b, 0xfe, 0x12, 0xec, 0xf7, 0xb9, 0x4e, 0x23, 0x93,
	0x66, 0x82, 0xa1, 0xe3, 0xed, 0x76, 0xa6, 0x2d, 0x25, 0x37, 0x3c, 0x7f, 0x0d, 0x8e, 0xce, 0x72,
	0xf5, 0xe1, 0xc6, 0x94, 0x95, 0xe8, 0xa1, 0xfc, 0x74, 0xb7, 0x1c, 0x75, 0x98, 0xbc, 0x33, 0x06,
	0x17, 0x60, 0x07, 0x3a, 0x2d, 0x4c, 0xae, 0x6b, 0x7e, 0x06, 0x34, 0x8c, 0xb1, 0x3d, 0x7d, 0x49,
	0xc3, 0x98, 0xbb, 0x60, 0x5d, 0x4f, 0x62, 0x41, 0x87, 0x74, 0x74, 0x2a, 0x9b, 0x65, 0x13, 0x49,
	0xae, 0x62, 0x61, 0xad, 0x23, 0xc9, 0x55, 0x3c, 0x90, 0xc0, 0x30, 0x8d, 0x07, 0xb8, 0xfc, 0x09,
	0x1c, 0x37, 0x6e, 0x98, 0x0a, 0x86, 0x5e, 0xbb, 0x1b, 0x7c, 0x21, 0xc0, 0x9a, 0x6e, 0xf2, 0x31,
	0xb0, 0x69, 0x69, 0x96, 0xf8, 0xda, 0xbd, 0x3d, 0xe9, 0xd2, 0x97, 0xc8, 0x72, 0x1f, 0x68, 0x62,
	0xf0, 0xbb, 0xf7, 0x1b, 0x34, 0x31, 0xdc, 0x03, 0x08, 0x6e, 0x8b, 0xbc, 0x5c, 0xd4, 0xb9, 0xd1,
	0x38, 0x31, 0x26, 0xb7, 0x22, 0xfc, 0x31, 0xf4, 0x82, 0xdb, 0xba, 0x5c, 0xe0, 0x60, 0xfa, 0x72,
	0xbd, 0x59, 0xa7, 0x68, 0xfe, 0xeb, 0x14, 0x7f, 0x10, 0xb0, 0xbb, 0xf3, 0x72, 0x90, 0x34, 0x5f,
	0xc0, 0x71, 0xb2, 0x28, 0x55, 0x56, 0xe3, 0x8c, 0xef, 0x77, 0x5a, 0xfa, 0xaf, 0xf2, 0xd8, 0xfe,
	0xf2, 0x7a, 0xdb, 0xe5, 0x7d, 0x27, 0xe0, 0x6c, 0x4e, 0xf4, 0x41, 0xea, 0x7b, 0x0e, 0xbd, 0xa6,
	0x97, 0x95, 0xb0, 0x86, 0xd6, 0xfe, 0x6b, 0x8d, 0xd7, 0x73, 0x0d, 0x3e, 0xac, 0xb2, 0xf3, 0x0b,
	0x38, 0xd9, 0xfa, 0x0b, 0x71, 0x1b, 0x58, 0x1c, 0x46, 0x33, 0xf7, 0x08, 0x57, 0xf3, 0x68, 0xe6,
	0x12, 0xde, 0x07, 0x7b, 0x1a, 0x46, 0x93, 0x68, 0x3e, 0x09, 0x5c, 0xca, 0x4f, 0xc1, 0x89, 0x82,
	0x70, 0xf6, 0xe6, 0x72, 0x2e, 0xdf, 0xb9, 0xd6, 0xa5, 0xfb, 0x75, 0xe5, 0x91, 0x6f, 0x2b, 0x8f,
	0xfc, 0x5c, 0x79, 0xe4, 0xf3, 0x2f, 0xef, 0xe8, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x69, 0xf2,
	0x01, 0xff, 0x25, 0x05, 0x00, 0x00,
}
